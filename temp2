static struct blk_cmd_filter blk_default_cmd_filter;
default_cmd_filter;
{
static int sg_get_version(int __user *p)
{
}
static int scsi_get_idlun(struct request_queue *q, int __user *p)
{
}
static int scsi_get_bus(struct request_queue *q, int __user *p)
{
}
static int sg_get_timeout(struct request_queue *q)
{
}
static int sg_set_timeout(struct request_queue *q, int __user *p)
{
get_user(timeout, p);
}
static int max_sectors_bytes(struct request_queue *q)
{
}
static int sg_get_reserved_size(struct request_queue *q, int __user *p)
{
}
static int sg_set_reserved_size(struct request_queue *q, int __user *p)
{
get_user(size, p);
}
static int sg_emulated_host(struct request_queue *q, int __user *p)
{
}
static void blk_set_cmd_filter_defaults(struct blk_cmd_filter *filter)
defaults(struct blk_cmd_filter *filter)
{
}
int blk_verify_command(unsigned char *cmd, fmode_t has_write_perm)
{
default_cmd_filter;
}
static int blk_fill_sghdr_rq(struct request_queue *q, struct request *rq,
{
copy_from_user(rq->cmd, hdr->cmdp, hdr->cmd_len))
}
static int blk_complete_sghdr_rq(struct request *rq, struct sg_io_hdr *hdr,
{
}
static int sg_io(struct request_queue *q, struct gendisk *bd_disk,
{
default:
case SG_DXFER_TO_DEV:
case SG_DXFER_TO_FROM_DEV:
case SG_DXFER_FROM_DEV:
}
int sg_scsi_ioctl(struct request_queue *q, struct gendisk *disk, fmode_t mode,
{
get_user(in_len, &sic->inlen))
get_user(out_len, &sic->outlen))
get_user(opcode, sic->data))
copy_from_user(rq->cmd, sic->data, cmdlen))
copy_from_user(buffer, sic->data + cmdlen, in_len))
default.  possible overriden later */
case SEND_DIAGNOSTIC:
case FORMAT_UNIT:
case START_STOP:
case MOVE_MEDIUM:
case READ_ELEMENT_STATUS:
case READ_DEFECT_DATA:
default:
}
static int __blk_send_generic(struct request_queue *q, struct gendisk *bd_disk,
{
}
static inline int blk_send_start_stop(struct request_queue *q,
{
}
int scsi_cmd_ioctl(struct request_queue *q, struct gendisk *bd_disk, fmode_t mode,
{
case SG_GET_VERSION_NUM:
case SCSI_IOCTL_GET_IDLUN:
case SCSI_IOCTL_GET_BUS_NUMBER:
case SG_SET_TIMEOUT:
case SG_GET_TIMEOUT:
case SG_GET_RESERVED_SIZE:
case SG_SET_RESERVED_SIZE:
case SG_EMULATED_HOST:
case SG_IO: {
copy_from_user(&hdr, arg, sizeof(hdr)))
case CDROM_SEND_PACKET: {
copy_from_user(&cgc, arg, sizeof(cgc)))
case CGC_DATA_UNKNOWN:
case CGC_DATA_WRITE:
case CGC_DATA_READ:
case CGC_DATA_NONE:
default:
case SCSI_IOCTL_SEND_COMMAND:
case CDROMCLOSETRAY:
case CDROMEJECT:
default:
}
int scsi_verify_blk_ioctl(struct block_device *bd, unsigned int cmd)
{
case SCSI_IOCTL_GET_IDLUN:
case SCSI_IOCTL_GET_BUS_NUMBER:
case SCSI_IOCTL_GET_PCI:
case SCSI_IOCTL_PROBE_HOST:
case SG_GET_VERSION_NUM:
case SG_SET_TIMEOUT:
case SG_GET_TIMEOUT:
case SG_GET_RESERVED_SIZE:
case SG_SET_RESERVED_SIZE:
case SG_EMULATED_HOST:
case CDROM_GET_CAPABILITY:
default:
}
int scsi_cmd_blk_ioctl(struct block_device *bd, fmode_t mode,
{
}
static int __init blk_scsi_ioctl_init(void)
{
default_cmd_filter);
}
